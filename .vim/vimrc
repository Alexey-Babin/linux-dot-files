scriptencoding utf-8
set encoding=utf-8

" appearance and behavior
set termguicolors

" This is only necessary if you use "set termguicolors".
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

" fixes glitch? in colors when using vim with tmux
set t_Co=256


" colorscheme codedark  " раньше было kolor, но там ошибки подсвечиваются плохо
" set background=dark   " потом взяли из плагина

syntax enable
filetype on             " required
filetype plugin indent on   " Включает определение типа файла, загрузку соответствующих ему плагинов и файлов отступов

set nocompatible        " Forget old vi
set autowrite           " Automatically save before comands like :next and :make
set hidden              " Hide buffers when they are abandonned
set history=100
set mouse-=a            " disable mouse usage (all modes)
set cursorline          " highlight current cursor line
set nocursorcolumn      " not highlight current cursor column
set showcmd             " Show (partial) command
set showmatch           " Show matching brackets
set showmode            " Show vim mode

" Auto completion menu
set wildmenu
set wildmode=longest:full,full
" set wildmode=list:longest,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
set wildignore+=.git,*.DS_Store
if exists ("&wildignorecase")
  set wildignorecase
endif

" Line number
set number              " Line numbers
set relativenumber      " Line numbers relative

" Search settings
set hlsearch            " Highlight search cases
set ignorecase          " Do case insensitive matching
set smartcase           " Do smartcase (if mixed case, so case sensitive) matching
set incsearch           " Incremental search

" ----- Tabs and indentations ----- {{{
" https://habr.com/ru/articles/64224/, http://vimcasts.org/episodes/tabs-and-spaces/
set tabstop=4           " A tab is four spaces
set softtabstop=4       " when hitting <BS>, pretend like a tab is removed, even if spaces
set shiftround          " use multiple of shiftwidth when indenting width '<' and '>'
set backspace=indent,eol,start      " allow bacspacing over everything in insert mode
set autoindent          " always set autoindenting on
set copyindent          " copy previous indentation on autoindenting
set smartindent         "
set cindent             "
set expandtab           " Expand tabs to spaces by default
set smarttab            " 
set shiftwidth=2        " Number of spaces
" If current file type is HTML, set indentation to 2 spaces
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab
" }}}

" ----- list (whitespace characters) ----- {{{
set nolist
if has("multi_byte")
  set listchars=tab:¤›,trail:·,precedes:←,extends:→,eol:↲,nbsp:␣,space:·
else
" compatible space characters
  set listchars=eol:$,tab:.\ ,trail:.,extends:>,precedes:<,nbsp:_
endif
if has("autocmd")
  augroup list
    autocmd!
    autocmd InsertEnter * let g:restorelist=&list | :set nolist
    autocmd InsertLeave * let &list=g:restorelist
  augroup END
endif
" }}}

" ----- soft wrap ----- {{{
set wrap
set linebreak           " Not break words when wrapping
set scrolloff=10        " 10 lines under/above current line
if has("multi_byte")
  set showbreak=…       " wrapped lines start with … character
else
  set showbreak=>
endif
" move inside wrapped line with ctrl
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
" }}}

"  keyboard switching
set keymap=russian-jcukenwin
set iminsert=0          " Чтобы при старте ввод был на английском, а не на русском
set imsearch=0          " Чтобы при старте поиск был на английском, а не на русском

" Postgresql
let g:sql_type_default = 'pgsql' 

" external files
source ~/.vim/xdg.vim

" ----- MAPPINGS ----- {{{
    nnoremap <SPACE> <Nop>
    let g:mapleader=" "           " map lader to Space
    let mapleader=" "
    let g:maplocalleader = ","      " map local leader to Comma


    " reload configuration
    nnoremap <silent> <leader>r :source ~/.vim/vimrc<CR> :echo "Config reloaded"<CR>
    
    " ---- F-keys -------
    
    " no indent to paste (toggle Paste mode)
    set pastetoggle=<F2>
    nnoremap <F2> :set invpaste paste?<CR>
    
    " display whitespace (list) characters with F3
    nnoremap <F3> :set list! list?<CR>
    " sudo then write
    cabbrev w!! w !sudo tee % >/dev/null
    
    " window navigation
    nnoremap <C-h> <C-w>h
    nnoremap <C-j> <C-w>j
    nnoremap <C-k> <C-w>k
    nnoremap <C-l> <C-w>l

    " window resizing
    map <S-Left> <C-w><
    map <S-Down> <C-w>-
    map <S-Up> <C-w>+
    map <S-Right> <C-w>>

    " <leader>q quits the current window
    nnoremap <silent> <leader>q :q<CR>

    " create a new tab
    nnoremap <silent> <leader>t :tabnew<CR>
    
    " write as sudo
    cmap w!! w !sudo tee > /dev/null %

    " Fix Ctrl + Arrows {{{
    " https://unix.stackexchange.com/questions/1709/how-to-fix-ctrl-arrows-in-vim
    " Just a temporary shorthand
    function! NoRemapNXIC(lhs, rhs_nxi, rhs_c = v:null)
      execute "nnoremap " .. a:lhs .. " " .. a:rhs_nxi
      execute "xnoremap " .. a:lhs .. " " .. a:rhs_nxi
      execute "inoremap " .. a:lhs .. " <C-O>" .. a:rhs_nxi
      if a:rhs_c isnot v:null
        execute "cnoremap " .. a:lhs .. " " .. a:rhs_c
      endif
    endfunction

    call NoRemapNXIC("<C-Left>",  "b")
    call NoRemapNXIC("<C-Right>", "e")
    call NoRemapNXIC("<S-Left>",  "B")
    call NoRemapNXIC("<S-Right>", "E")

    " Handle <Ctrl> + <Arrow> escape sequences
    call NoRemapNXIC("<ESC>[1;5A", "gk", "<Nop>")
    call NoRemapNXIC("<ESC>[1;5B", "gj", "<Nop>")
    call NoRemapNXIC("<ESC>[1;5D", "b",  "<C-Left>")
    call NoRemapNXIC("<ESC>[1;5C", "e",  "<C-Right>")

    " Handle <Shift> + <Arrow> escape sequences
    call NoRemapNXIC("<ESC>[1;2A", "<PageUp>",   "<Nop>")
    call NoRemapNXIC("<ESC>[1;2B", "<PageDown>", "<Nop>")
    call NoRemapNXIC("<ESC>[1;2D", "B",          "<S-Left>")
    call NoRemapNXIC("<ESC>[1;2C", "E",          "<S-Right>")

    " Handle <Ctrl> + <Shift> + <Arrow> escape sequences
    call NoRemapNXIC("<ESC>[1;6D", "ge", "<C-Left>")
    call NoRemapNXIC("<ESC>[1;6C", "w",  "<C-Right>")

    delfunction NoRemapNXIC
    "}}}
" }}}


" ----- PLUGINS ----- {{{
if len(glob("$HOME")) && empty(glob("$HOME/.vim/autoload/plug.vim"))
    execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

    " NERD tree + icons
    Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' } 
    Plug 'ryanoasis/vim-devicons'

    " A configurable statusline/tabline plugin for Vim
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " automatically restore one file's cursor position and folding information after restart vim
    Plug 'vim-scripts/restore_view.vim'

    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } 
    Plug 'junegunn/fzf.vim'

    " Work with gpg-encoded files
    Plug 'jamessan/vim-gnupg'

    Plug 'dense-analysis/ale'

    Plug 'lifepillar/pgsql.vim'

    " A simple, easy-to-use Vim alignment plugin.
    Plug 'junegunn/vim-easy-align'
    
    " hotkey helper - TODO: разобраться с ним
    Plug 'liuchengxu/vim-which-key'

    " NERD Commenter (leader + cc; leader + cu)
    Plug 'preservim/nerdcommenter'

    Plug 'elzr/vim-json'
    Plug 'hjson/vim-hjson'

    Plug 'tomasiser/vim-code-dark'
call plug#end()
" }}}

" ----- Plugins settings ----- {{{
    filetype plugin on
    " Nerd tree {{{
    nnoremap <C-n> :NERDTree<CR> 
    nnoremap <C-t> :NERDTreeToggle<CR> 
    " for Vim open with no file 
    autocmd StdinReadPre * let s:std_in=1 
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
      \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif |
      \ AirlineTheme kolor
    autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
    " }}}

    " Status line {{{ 
    let g:airline_powerline_fonts = 1
    let g:airline#extensions#keymap#enabled = 0     " Не показывать текущий маппинг
    let g:airline_section_z = "\ue0a1:%l/%L Col:%c"  " Кастомная графа положения курсора
    let g:Powerline_symbols = 'unicode'
"   autocmd VimEnter AirlineTheme kolor
    " }}} 
    
    " FZF key mappings
    nnoremap <silent> <leader>o :FZF<CR> 
    nmap <leader><tab> <plug>(fzf-maps-n)
    xmap <leader><tab> <plug>(fzf-maps-x)
    omap <leader><tab> <plug>(fzf-maps-o)

    imap <c-x><c-k> <plug>(fzf-complete-word)
    imap <c-x><c-f> <plug>(fzf-complete-path)
    imap <c-x><c-l> <plug>(fzf-complete-line)

    nmap <leader>ff :Files<CR>
    nmap <leader>fg :GFiles<CR>
    nmap <leader>fb :Buffers<CR>
    nmap <leader>fc :Rg<CR> 
    nmap <leader>fk :Maps<CR>

    " Remember position of last edit and return on reopen {{{
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif 
    " for plugin restore_view.vim
    set viewoptions=cursor,folds,slash,unix
    " }}}

    " GPG encoded content
    let g:GPGPreferArmor=1
    let g:GPGDefaultRecepients=["GnuPG ID here"]

    " EasyAlign: start interactive EasyAlign in Visual mode (vipga)
    xmap ga <Plug>(EasyAlign)
    " EasyAlign: start interactive EasyAlign for a motion/text object (gaip)
    nmap ga <Plug>(EasyAlign)

    let g:NERDCreateDefaultMappings = 1

    " whichkey
    set timeoutlen=500
    let g:which_key_map = {}
    let g:which_key_map['w'] = {
          \ 'name': '+windows',
             \ 'w': ['<C-W>w',     'other-window'],
             \ 'd': ['<C-W>c',     'delete-window'],
             \ '-': ['<C-W>s',     'split-window-below'],
             \ '|': ['<C-W>v',     'split-window-right'],
             \ '2': ['<C-W>h',     'layout-double-columns'],
             \ 'h': ['<C-W>h',     'window-left'],
             \ 'l': ['<C-W>l',     'window-right'],
             \ 'k': ['<C-W>k',     'window-up'],
             \ 'j': ['<C-W>j',     'window-bellow'],
             \ 'H': ['<C-W>5<',    'expand-window-left'],
             \ 'J': [':resize +5', 'expand-window-below'],
             \ 'L': ['<C-W>5>',    'expand-window-right'],
             \ 'K': [':resize -5', 'expand-window-up'],
             \ '=': ['<C-W>=',     'balance-window'],
             \ 's': ['<C-W>s',     'split-window-below'],
             \ 'v': ['<C-W>v',     'split-window-right'],
             \ '?': ['Windows',    'fzf-window'],
          \ }
    let g:which_key_map.b = {
      \ 'name' : '+buffer' ,
      \ '1' : ['b1'        , 'buffer 1']        ,
      \ '2' : ['b2'        , 'buffer 2']        ,
      \ 'd' : ['bd'        , 'delete-buffer']   ,
      \ 'f' : ['bfirst'    , 'first-buffer']    ,
      \ 'h' : ['Startify'  , 'home-buffer']     ,
      \ 'l' : ['blast'     , 'last-buffer']     ,
      \ 'n' : ['bnext'     , 'next-buffer']     ,
      \ 'p' : ['bprevious' , 'previous-buffer'] ,
      \ '?' : ['Buffers'   , 'fzf-buffer']      ,
      \ }

    let g:which_key_map.K = 'which_key_ignore'
    let g:which_key_map.c = { 'name' : '+comment' }
    let g:which_key_map_visual = {}
    let g:which_key_map.f = { 'name' : '+fzf' }
    let g:which_key_map.f.f = 'FZF Files'
    let g:which_key_map.f.g = 'FZF Git Files'
    let g:which_key_map.f.b = 'FZF buffers'
    let g:which_key_map.f.c = 'FZF lines'
    let g:which_key_map.f.k = 'FZF keymaps'
    let g:which_key_map.r = 'Reload config'
    let g:which_key_map.t = 'New tab'

    nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
    vnoremap <silent> <leader> :<c-u>WhichKeyVisual '<Space>'<CR>

    call which_key#register('<Space>', "g:which_key_map", "n")
    call which_key#register('<Space>', "g:which_key_map_visual", "v")
    
    let g:codedark_conservative=1
    let g:codedark_italics=1
    let g:codedark_transparent=1
    let g:airline_theme = 'codedark'
    colorscheme codedark

    " scheme fine tuning
    hi Comment guifg=#707070 ctermfg=darkgray
    hi Visual guifg=#333333 guibg=darkgray
    hi CursorLine guibg=#2D2D2D
    hi Folded guifg=#888888
" }}}

" ----- Toggle Line Numbers (cycles between relative/absolute/none) ----- {{{
function! RelativeNumbersToggle()
  if (&number == 1 && &relativenumber == 1)
    set nonumber
    set relativenumber relativenumber?
  elseif (&number == 0 && &relativenumber == 1)
    set norelativenumber
    set number number?
  elseif (&number == 1 && &relativenumber == 0)
    set norelativenumber
    set nonumber nonumber?
  else
    set number
    set relativenumber relativenumber?
  endif
endfunc
nnoremap <F4> :call RelativeNumbersToggle()<CR>
" }}}

" ----- Cursor settings ----- {{{
" Display cursorline and cursorcolumn ONLY in active window 
    augroup cursor_off 
        autocmd! 
        autocmd WinLeave * set nocursorline nocursorcolumn 
        autocmd WinEnter * set cursorline nocursorcolumn 
    augroup OFF 

    " Cursor shapes for different modes
    set ttimeoutlen=10      " пониженная задержка для escape последовательностей
    let &t_SI.="\e[5 q"     " SI = insert mode
    let &t_SR.="\e[3 q"     " SR = replace
    let &t_EI.="\e[1 q"     " EI = normal
    "1 - мигающий прямоугольник
    "2 - обычный прямоугольник
    "3 - мигающее подчёркивание
    "4 - просто подчёркивание
    "5 - мигающая вертикальная черта
    "6 - просто вертикальная черта

    " reset the cursor on start (for older versions of vim, usually not required)
    augroup cursorMode
        autocmd!
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
" }}}

" --------------- Foldings ------------------------------- {{{
    " Enable the marker method of folding 
    augroup filetype_vim_fold
        autocmd! 
        autocmd FileType vim setlocal foldmethod=marker 
    augroup END 
    " Folding - let Vim define folding automatically by indent level but also allow to create folds manually. Save folds (view) on close file
    augroup fold_by_indent_or_manual
        autocmd!
        autocmd BufReadPre * setlocal foldmethod=indent
        autocmd BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
    augroup END
    " Key mapping. F9 to open/close folds in normal, create folding in visual
    inoremap <F9> <C-O>za
    nnoremap <F9> za
    onoremap <F9> <C-C>za
    vnoremap <F9> zf
"}}}

runtime ftplugin/man.vim
