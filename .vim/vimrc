scriptencoding utf-8
set encoding=utf-8

" appearance and behavior
set termguicolors
colorscheme lunaperche
set background=dark

syntax enable
filetype on             " required

set nocompatible        " Forget old vi
set autowrite           " Automatically save before comands like :next and :make
set hidden              " Hide buffers when they are abandonned
set history=100
set mouse=a             " Enable mouse usage (all modes)
set cursorline          " highlight current cursor line
set nocursorcolumn      " not highlight current cursor column
set showcmd             " Show (partial) command
set showmatch           " Show matching brackets
set showmode            " Show vim mode

" Auto completion menu
set wildmenu
set wildmode=list:longest,full
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx

" Line number
set number              " Line numbers
set relativenumber      " Line numbers relative

" Search settings
set hlsearch            " Highlight search cases
set ignorecase          " Do case insensitive matching
set smartcase           " Do smartcase (if mixed case, so case sensitive) matching
set incsearch           " Incremental search

" Tabs and indentations
" https://habr.com/ru/articles/64224/, http://vimcasts.org/episodes/tabs-and-spaces/
set tabstop=4           " A tab is four spaces
set softtabstop=4       " when hitting <BS>, pretend like a tab is removed, even if spaces
set shiftround          " use multiple of shiftwidth when indenting width '<' and '>'
set backspace=indent,eol,start      " allow bacspacing over everything in insert mode
set autoindent          " always set autoindenting on
set copyindent          " copy previous indentation on autoindenting
set smartindent         "
set cindent             "
set expandtab           " Expand tabs to spaces by default
set smarttab            " 
set shiftwidth=2        " Number of spaces
" If current file type is HTML, set indentation to 2 spaces
autocmd Filetype html setlocal tabstop=2 shiftwidth=2 expandtab

" whitespace characters
set nolist
" compatible space characters
" set listchars=eol:$,tab:.\ ,trail:.,extends:>,precedes:<,nbsp:_
" incomatible with debian stretch
set listchars=tab:¤›,trail:·,precedes:←,extends:→,eol:↲,nbsp:␣,space:·


" soft wrap
set wrap
set linebreak           " Not break words when wrapping
set scrolloff=10        " 10 lines under/above current line
set showbreak=…         " wrapped lines start with … character
" move inside wrapped line with ctrl
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')

"  keyboard switching
set keymap=russian-jcukenwin
set iminsert=0          " Чтобы при старте ввод был на английском, а не на русском
set imsearch=0          " Чтобы при старте поиск был на английском, а не на русском

" Postgresql
let g:sql_type_default = 'pgsql' 

" external files
source ~/.vim/xdg.vim

" ------------------------------- PLUGINS -----------------------------------{{{
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')
    " NERD tree + icons
    Plug 'preservim/nerdtree'
    Plug 'ryanoasis/vim-devicons'

    " A light and configurable statusline/tabline plugin for Vim
    Plug 'itchyny/lightline.vim'

    " automatically restore one file's cursor position and folding information after restart vim
    Plug 'vim-scripts/restore_view.vim'

    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } 

    Plug 'dense-analysis/ale'

    Plug 'lifepillar/pgsql.vim'
    " hotkey helper - TODO: разобраться с ним
    " Plug 'liuchengxu/vim-which-key'

call plug#end()
" }}}

" ------------------------------ Plugins settings ----------------------------{{{
    " Nerd tree {{{
    nnoremap <C-n> :NERDTree<CR> 
    nnoremap <C-t> :NERDTreeToggle<CR> 
    " for Vim open with no file 
    autocmd StdinReadPre * let s:std_in=1 
    autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif 
    " }}}

    " Status line {{{ 
    set statusline=                         " Reset statusline
    set statusline+=\ %F\ %M\ %Y\ %R        " Left side
    set statusline+=%=                      " Separator
    " Right side:
    set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\%p%%
    " Status
    set laststatus=2
    if !has('gui_running')
        set t_Co=256
    endif
    " }}} 

    " FZF key mappings
    nnoremap <silent> <leader>o :FZF<CR> 

    " Remember position of last edit and return on reopen {{{
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif 
    " for plugin restore_view.vim
    set viewoptions=cursor,folds,slash,unix
    " }}}

" }}}

" ------------------------------- MAPPINGS -----------------------------------{{{
    let g:mapleader = " "           " map lader to Space
    let g:maplocalleader = ","      " map local leader to Comma
    " ---- F-keys -------
    " no indent to paste (toggle Paste mode)
    set pastetoggle=<F2>
    nnoremap <F2> : set invpaste paste?<CR>
    " display whitespace (list) characters with F3
    nnoremap <F3> :set list! list?<CR>
    " toggle line numbers (for system buffer, a.e.)
    nnoremap <F4> :set rnu! \| set nu!<CR>
" }}}

" --------------- Cursor settings -------------------------- {{{
" Display cursorline and cursorcolumn ONLY in active window 
    augroup cursor_off 
        autocmd! 
        autocmd WinLeave * set nocursorline nocursorcolumn 
        autocmd WinEnter * set cursorline cursorcolumn 
    augroup OFF 

    " Cursor shapes for different modes
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"

    " reset the cursor on start (for older versions of vim, usually not required)
    augroup cursorMode
        autocmd!
        autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
" }}}

" --------------- Foldings ------------------------------- {{{
    " Enable the marker method of folding 
    augroup filetype_vim_fold
        autocmd! 
        autocmd FileType vim setlocal foldmethod=marker 
    augroup END 
    " Folding - let Vim define folding automatically by indent level but also allow to create folds manually. Save folds (view) on close file
    augroup fold_by_indent_or_manual
        autocmd!
        autocmd BufReadPre * setlocal foldmethod=indent
        autocmd BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
    augroup END
    " Key mapping. F9 to open/close folds in normal, create folding in visual
    inoremap <F9> <C-O>za
    nnoremap <F9> za
    onoremap <F9> <C-C>za
    vnoremap <F9> zf
    " Key mapping. Space for toggle fold (when folding mode Manual and cusor on fold in NORMAL).
    " Create fold in visual mode
    nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
    vnoremap <Space> zf
"}}}
