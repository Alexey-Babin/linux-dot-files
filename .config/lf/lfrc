set icons true
set hidden!
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"

set period 1 # sec - to check directory updates
#line numbers
set relativenumber
set number


set previewer ~/.config/lf/preview

# interpreter for shell commands
set shell bash

set promptfmt "
\033[38;2;35;38;39;48;2;202;31;31m
\033[38;2;202;31;31;48;2;40;47;62m
\033[38;2;255;255;255m %w
\033[38;2;40;47;62;48;2;58;67;89m
\033[38;2;255;255;255m %f
\033[;38;2;58;67;89;49m\033[m"

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"


set incsearch
set incfilter
set ratios 2:3:4

set truncatechar "…"
set waitmsg "\033[1;31m--------------- ~~~~~~~~~~ ----------------⏎\033[m\n\n"

set timefmt "2006-01-02 15:04:05 "
set infotimefmtnew '01.02 15:04'
set infotimefmtold '01.02.06'
set errorfmt "\033[1;31m"
set numberfmt "\033[38;2;75;87;116m"

set info size
set dircounts false

set ruller 'df:acc:progress:selection:filter:ind'
set tabstop 4
set scrolloff 5
set wrapscroll

set sixel 

# set PAGER=batcat


# =========================== UI ======================================================
%test $LF_LEVEL -eq 1 || >&2 printf "Warning: you are in a nested lf instance!"

# =========================== COMMANDS ================================================
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# define a custom 'rename' command without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# move current file or selected files to trash folder
%mkdir -p ~/.trash
cmd trash %set -f; mv $fx ~/.trash


cmd delete ${{
  clear; tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
  printf "\033[1;33mDelete? \033[37m[\033[32my\033[37m/\033[31mn\033[37m]\033[m "
  read -r -n 1 REPLY
  case "$REPLY" in
    [yY]) rm -rf -- $fx ;;
  esac
}}

cmd chmodx ${{
  clear;
  chmod u+x $fx
  lf -remote "send $id reload"
}}

# extract the current file 
cmd extract ${{
  clear; 
  tput cup $(($(tput lines)/3)); tput bold
  set -f
  printf -- "%s\n" $fx | sed 's|'"$HOME"'||'
  printf "\t\033[1;34mExtract? \033[37m[\033[32my\033[37m/\033[31mN\033[37m]\033[m "
  read -r -n 1 REPLY
  case "$REPLY" in
    [yY]) aunpack $fx ;;
  esac
}}


# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd tst ${{
  echo $fx
}}
# =========================== MAPPINGS ================================================
map <delete> delete

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true
map <c-o> !true

# execute current file (must be executable)
map x $"$f"
map X !"$f"

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f

# map a :push %mkdir<space>
map r push :rename<space>

map E extract


map <c-f> $lf -remote "send $id select \"$(fzf)\""

# ----- zoxide integration
cmd z %{{
    result="$(zoxide query --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
    zoxide add "$PWD"
}}

# ------ Move up-down parent directory
cmd move-parent &{{
  dironly="setlocal \"$(dirname -- "$PWD" | sed 's/\\/\\\\/g;s/"/\\"/g')\" dironly"
  lf -remote "send $id :updir; $dironly true; $1; $dironly false; open"
}}

map J move-parent down
map K move-parent up
